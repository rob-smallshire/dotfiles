- hosts: message-broker-hosts
  name: Gather facts from message-broker-hosts
  vars:
      ansible_python_interpreter: /usr/bin/python3
  tasks: [ ]

- hosts: celery-worker-hosts message-broker-hosts
  vars:
      ansible_python_interpreter: /usr/bin/python3
  tasks:

    - name: Wait for the remote system to become available
      wait_for_connection:
          timeout: 300

    - name: "Working around Ansible lameness on Ubuntu..."
      become: yes
      become_method: sudo
      apt:
        pkg: "{{ item }}"
        state: latest
        update_cache: yes
        cache_valid_time: 3600
      with_items:
        - aptitude

    - name: Update apt repositories
      become: yes
      become_method: sudo
      apt:
        update_cache: yes
        upgrade: yes

# Ultimately, we should probably download and compile our own Python into /opt
# so we have precise control over the version of Python used, rather than
# relying on whatever Ubuntu has packaged up for us.

    - name: Install python3-venv
      become: yes
      become_method: sudo
      apt:
        name: python3-venv
        state: present

    - name: Install python3-pip
      become: yes
      become_method: sudo
      apt:
        name: python3-pip
        state: present

    - name: Upgrade pip in a virtualenv
      pip:
        virtualenv_command: /usr/bin/pyvenv
        virtualenv: ~/.virtualenvs/cosmic-cloud
        name: pip
        state: latest

    - name: Install Celery
      pip:
        virtualenv_command: /usr/bin/pyvenv
        virtualenv: ~/.virtualenvs/cosmic-cloud
        name: celery
        version: 3.1.25

    - name: Ensure ~/cosmic-cloud/ exists
      file:
        path: /home/ubuntu/cosmic-cloud/
        state: directory
        owner: ubuntu

    - name: Deploy celeryconfig.py
      template:
        src: celeryconfig.py.j2
        dest: /home/ubuntu/cosmic-cloud/celeryconfig.py
        owner: ubuntu
      vars:
        user: merlin
        password: avalon
        host: "{{ groups['message-broker-hosts'][0] }}"
        vhost: camelot
        module: adder
      notify:
        - "restart celery"

    - name: Deploy worker.py
      copy:
        src: adder.py
        dest: /home/ubuntu/cosmic-cloud/adder.py
        owner: ubuntu
      notify:
        - "restart celery"

    - name: Deploy /etc/logrotate.d/celery_worker
      become: yes
      become_method: sudo
      copy:
        src: celery_worker_log_rotate
        dest: /etc/logrotate.d/celery_worker
      notify:
        - "restart celery"

    - name: Deploy /etc/systemd/system/celery.service
      become: yes
      become_method: sudo
      copy:
        src: celery.service
        dest: /etc/systemd/system/celery.service
      notify:
        - "restart celery"

    - name: Deploy /etc/conf.d/celery
      become: yes
      become_method: sudo
      copy:
        src: conf_d_celery
        dest: /etc/conf.d/celery
      notify:
        - "restart celery"

    - name: Deploy /etc/tmpfiles.d/celery.conf
      become: yes
      become_method: sudo
      copy:
        src: tmpfiles_d_celery_conf
        dest: /etc/tmpfiles.d/celery.conf
      notify:
        - "restart celery"

  handlers:

    - name: Restart Celery
      become: yes
      become_method: sudo
      systemd:
        name: celery
        state: restarted
        enabled: yes
        daemon_reload: yes
      listen: "restart celery"
